name: CyberGuard IDS/IPS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: secure_password_123
          POSTGRES_USER: cybersec
          POSTGRES_DB: cybersec_ids
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install fastapi uvicorn sqlalchemy psycopg2-binary redis websockets
        pip install pandas numpy matplotlib seaborn lightgbm
        pip install python-multipart jinja2 python-jose[cryptography]
        pip install pytest pytest-asyncio httpx
    
    - name: Create environment file
      run: |
        cd backend/backend
        cat > .env << EOF
        DATABASE_URL=postgresql://cybersec:secure_password_123@localhost:5432/cybersec_ids
        REDIS_URL=redis://localhost:6379
        SECRET_KEY=test-secret-key-for-ci
        ALGORITHM=HS256
        ML_MODEL_PATH=../ml-iot/iot_ids_lightgbm_20250819_132715.pkl
        NETWORK_INTERFACE=lo
        TARGET_IP=127.0.0.1
        LOG_LEVEL=INFO
        EOF
    
    - name: Setup database schema
      run: |
        cd backend
        PGPASSWORD=secure_password_123 psql -h localhost -U cybersec -d cybersec_ids -f create_reports_tables.sql
    
    - name: Run backend tests
      run: |
        cd backend/tests
        python -m pytest test_complete_system.py -v
    
    - name: Test API endpoints
      run: |
        cd backend
        python test_endpoints.py

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --watchAll=false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: secure_password_123
          POSTGRES_USER: cybersec
          POSTGRES_DB: cybersec_ids
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        # Backend dependencies
        cd backend
        python -m pip install --upgrade pip
        pip install fastapi uvicorn sqlalchemy psycopg2-binary redis websockets
        pip install pandas numpy matplotlib seaborn lightgbm
        pip install python-multipart jinja2 python-jose[cryptography]
        
        # Frontend dependencies
        cd ../frontend
        npm ci
    
    - name: Setup environment
      run: |
        cd backend/backend
        cat > .env << EOF
        DATABASE_URL=postgresql://cybersec:secure_password_123@localhost:5432/cybersec_ids
        REDIS_URL=redis://localhost:6379
        SECRET_KEY=test-secret-key-for-ci
        ALGORITHM=HS256
        ML_MODEL_PATH=../ml-iot/iot_ids_lightgbm_20250819_132715.pkl
        NETWORK_INTERFACE=lo
        TARGET_IP=127.0.0.1
        LOG_LEVEL=INFO
        EOF
    
    - name: Setup database
      run: |
        cd backend
        PGPASSWORD=secure_password_123 psql -h localhost -U cybersec -d cybersec_ids -f create_reports_tables.sql
    
    - name: Run integration tests
      run: |
        chmod +x scripts/test_complete_functionality.sh
        ./scripts/test_complete_functionality.sh

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t cyberguard-backend .
    
    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t cyberguard-frontend .
    
    - name: Test Docker containers
      run: |
        cd backend
        docker-compose up -d postgres redis
        sleep 10
        docker run --network host -d --name backend cyberguard-backend
        sleep 5
        curl -f http://localhost:8000/docs || exit 1
        docker stop backend
